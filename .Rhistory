print(n = 100 )
all <- read_csv("data/raw/Anonymised Combined Line List.csv")
all
all %>%
glimpse
all %>% filter(is.na(Onsetdate ) )
all %>% filter(is.na(Onsetdate ) ) %>%
glimpse
all %>% filter(!is.na(Onsetdate ) ) %>%
glimpse
all %>%
filter(pillar == "Pillar 1" )
all %>%
filter(pillar == "Pillar 1") %>%
group_by(lab_report_date, NHSER_name) %>%
tally()
all %>%
filter(pillar == "Pillar 1", !is.na(NHSER_name), lab_report_date > "2020-03-01") %>%
group_by(lab_report_date, NHSER_name) %>%
tally()
all %>% mutate(lab_report_date = mdy(lab_report_date))
filter(pillar == "Pillar 1", !is.na(NHSER_name), lab_report_date > "2020-03-01") %>%
group_by(lab_report_date, NHSER_name) %>%
tally()
all %>% mutate(lab_report_date = mdy(lab_report_date)) %>%
filter(pillar == "Pillar 1", !is.na(NHSER_name), lab_report_date > "2020-03-01") %>%
group_by(lab_report_date, NHSER_name) %>%
tally()
all %>% mutate(lab_report_date = mdy(lab_report_date)) %>%
filter(pillar == "Pillar 1", !is.na(NHSER_name), lab_report_date > "2020-03-01") %>%
group_by(lab_report_date, NHSER_name) %>%
tally() -> pillar_1_tests
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(NHSER_name) + geom_bar(stat = "identity" )
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(~NHSER_name) + geom_bar(stat = "identity" )
all %>% mutate(lab_report_date = mdy(lab_report_date)) %>% filter(pillar == "Pillar 1", !is.na(NHSER_name), lab_report_date >= "2020-08-01") %>% group_by(lab_report_date, NHSER_name) %>% tally() -> pillar_1_tests
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(~NHSER_name) + geom_bar(stat = "identity" )
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(~NHSER_name) + geom_rect(stat = "identity" )
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(~NHSER_name) + geom_bar(stat = "identity" )
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(~NHSER_name) + geom_bar(stat = "identity", width = 1)
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(~NHSER_name) + geom_bar(stat = "identity", width = 1)
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(~NHSER_name) + geom_bar(stat = "identity", width = 1) + theme_cowplot()
ggplot(pillar_1_tests, aes(x = lab_report_date, y = n)) + facet_wrap(~NHSER_name) + geom_bar(stat = "identity", width = 1) + cowplot::theme_cowplot()
getwd()
dstl_data
dstl_data
dstl_data$value_date %>%
unique
dstl_data$value_type %>%
unique
getwd()
files
files
files
files
files <- sftp_list()
files <- sftp_list()
files <- sftp_list()
files
df_data <- readRDS( file.path(rds_path, "latest_data.rds"))
df_data
df_data %>%
filter(value_type == "hospital_inc", geography == "Northern Ireland" )
df_data %>%
filter(value_type == "hospital_inc", geography == "Northern Ireland" ) %>%
tail
df_data %>%
filter(value_type == "hospital_inc", geography == "Northern Ireland" ) %>%
tail(n = 20) %>%
print(n = 20 )
df_data %>%
filter(value_type == "hospital_inc", geography == "North East and Yorkshire" ) %>%
tail(n = 20) %>%
print(n = 20 )
df_data %>%
filter(value_type == "hospital_inc", geography == "North East and Yorkshire" ) %>% .$vlaue
df_data %>%
filter(value_type == "hospital_inc", geography == "North East and Yorkshire" ) %>% .$value
ma <- function(x, n = 7){stats::filter(x, rep(1 / n, n), sides = 2)}
df_data %>%
filter(value_type == "hospital_inc", geography == "North East and Yorkshire" ) %>% .$value %>%
ma
8 & 6
8 * 7
56 / 6
44 * 2**9
df_data %>%
filter(value_type == "hospital_inc", geography == "North East and Yorkshire" ) 
df_data %>%
filter(value_type == "hospital_inc", geography == "North East and Yorkshire" ) %>%
tail
44 * 2**9
44 * 2**9.3
44 * 2**(9.3)
q()
n
dstl_data
dstl_data %>%
filter(value_type == "hospital_inc")
dstl_data <-
  read_excel(dstl_file_name, "Extracted Data",
             col_type = ct) %>%
  rename_all(janitor::make_clean_names) %>%
  mutate(date = as.Date(date_val)) %>%
  select(-date_val, -day, -month, -year) 
dstl_data
dstl_data %>% filter(date == "2020-04-01" )
glimpse
dstl_data %>% filter(date == "2020-04-01" ) %>%
glimpse
dstl_data %>% filter(date == "2020-04-01", geography == "London" ) %>% glimpse
dstl_data %>% filter(date == "2020-04-01", geography == "London" ) %>% glimpse
dstl_data
dstl_data %>%
filter(value_type == "hospital_inc_old")
dstl_data %>% filter(value_type == "hospital_inc_old")
dstl_data %>% filter(value_type == "hospital_inc")
dstl_data %>% filter(value_type == "hospital_inc_new")
dstl_data %>% filter(value_type == "hospital_inc")
private
dstl_data %>%
filter(value_type == "hospital_inc_old")
dstl_data %>%
tail
dstl_data %>% filter(value_type == "hospital_inc")
dstl_data %>% filter(value_type == "hospital_inc") %>%
tail
dstl_data %>% filter(value_type == "hospital_inc_old") %>%
tail
dstl_data %>% filter(value_type == "hospital_inc_old") %>%
tail
dstl_data <-
  read_excel(dstl_file_name, "Extracted Data",
             col_type = ct) 
dstl_data$ReportLevel %>%
unique
private
dstl_data
dstl_data %>%
colnames
deaths_line_england_list
deaths_line_england_list[[1]]
deaths_line_england_list[[1]] %>%
tail
deaths_line_england_list[["DSTL"]] <- dstl_data %>%
  filter(geography %in% c(nations, regions),
         value_type %in% c("phe_death", "phe_type28_death_inc_line"))
deaths_line_england_list[[1]] %>%
tail
deaths_line_england_list[[1]] %>%
head
deaths_line_england_list[[1]] %>% .$value_type %>%
unique
dstl_data$value_type %>%
unique
deaths_line_england_list[[1]] %>% .$value_type %>%
unique
deaths_line_england_list[[1]] %>% .$value_type %>%
unique
plot_data$value_type %>%
unique
plot_data <- df_data %>%
  filter(type == "Data",
         value_date >= today() - 6 * 7) %>%
  complete(value_date, geography, value_desc) %>%
  mutate(type = if_else(is.na(type), "Data", type))
plot_data
deaths_line_england[["Line list"]]
deaths_line_england_list[["Line list"]]
private2 <- deaths_line_england_list[["Line list"]]
private2 %>%
tail
dstl_data$value_type %>%
unique
dstl_data
dstl_data$value_type %>%
uniuqe
dstl_data$value_type %>%
unique
deaths_line_england_list[["DSTL"]] <- dstl_data %>%
  filter(geography %in% c(nations, regions),
         value_type %in% c("phe_confirmed_death_inc_line",
                           "phe_type28_death_inc_line")) 
deaths_line_england_list[["DSTL"]]
english_pillars <-
  read_csv(england_cases_file) %>%
  rename_all(janitor::make_clean_names) %>%
  rename(date_specimen = "specimen_date") 
english_pillars <-
  read_csv(england_cases_file) %>%
  rename_all(janitor::make_clean_names) %>%
  rename(date_specimen = "specimen_date") %>%
  mutate(lower_age_limit =
           socialmixr::reduce_agegroups(age, neg_age_limits))
english_pillars <-
  read_csv(england_cases_file) %>%
  rename_all(janitor::make_clean_names) %>%
  rename(date_specimen = "specimen_date") %>%
  mutate(lower_age_limit =
           socialmixr::reduce_agegroups(age, neg_age_limits))
english_pillars
english_pillars <-
  read_csv(england_cases_file) %>%
  rename_all(janitor::make_clean_names) %>%
  rename(date_specimen = "specimen_date") %>%
  mutate(lower_age_limit =
           socialmixr::reduce_agegroups(age, neg_age_limits))
english_pillars
english_pillars %>%
glimpse
q()
n
source("R/get_data.r" )
q()
n
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::document()
devtools::load_all()
data(uk_forecasts )
data(covid_uk_data )
data(covid_uk_private_data )
data <- rbind(covid_uk_private_data, covid_uk_data)
x <- generate_ensembles(uk_forecasts, data)
uk_forecasts
forecasts <- uk_forecasts %>%
filter(creation_date == "2020-03-31")
x <- generate_ensembles(forecasts, data)
c
devtools::load_all()
x <- generate_ensembles(forecasts, data)
devtools::load_all()
x <- generate_ensembles(forecasts, data)
c
devtools::load_all()
x <- generate_ensembles(forecasts, data)
c
devtools::load_all()
devtools::load_all()
x <- generate_ensembles(forecasts, data)
c
n
Q
devtools::load_all()
x <- generate_ensembles(forecasts, data)
qe <-
      qra(complete_forecasts,
          data, target_date = as.Date(creation_date),
          enforce_normalisation = (norm == 1),
          intercept = (intercept == 1),
          per_quantile_weights = (per_quantile_weights == 1),
          history = history_weeks,
          max_future = 14)
history_weeks
debug(qra )
n
latest_checked
present_models
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
c
c
obs_and_pred
present_models
creation_dates
obs_and_pred
forecasts
Q
debug(qra )
x <- generate_ensembles(forecasts, data)
c
c
forecasts
obs_and_pred
target_date
creation_date
Q
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
c
c
devtools::load_all("~/code/qra")
devtools::load_all()
x <- generate_ensembles(forecasts, data)
x <- generate_ensembles(forecasts, data)
creation_dates
creation_dates <- forecasts %>%
    filter(creation_date > min(creation_date)) 
creation_date
creation_dates
forecasts
Q
forecasts <- uk_forecasts %>% filter(creation_date < "2020-04-11")
x <- generate_ensembles(forecasts, data)
c
c
x <- generate_ensembles(forecasts, data)
max_horizons
n
complete_set
n
x <- generate_ensembles(forecasts, data)
c
x <- generate_ensembles(forecasts, data)
c
c
x <- generate_ensembles(forecasts, data)
c
c
n
complete_set %>%
    filter(!is.na(data)) 
complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) 
complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) 
complete_set
complete_forecasts
c
x <- generate_ensembles(forecasts, data)
complete_forecasts
Q
devtools::load_all()
x <- generate_ensembles(forecasts, data)
c
x <- generate_ensembles(forecasts, data)
Q
devtools::load_all()
x <- generate_ensembles(forecasts, data)
c
x <- generate_ensembles(forecasts, data)
n
s
n
x <- generate_ensembles(forecasts, data)
debug(qra::qra )
c
c
present_models
present_models %>%
glimpse
latest_checked %>%
glimpse
n
obs_and_pred %>%
      dplyr::filter(creation_date %in% creation_dates)
obs_and_pred %>%
      dplyr::filter(creation_date %in% creation_dates) %>%
      ## select present models
      dplyr::inner_join(present_models, by = colnames(present_models))
Q
dev
dev
devtools::load_all()
x <- generate_ensembles(forecasts, data)
c
c
x <- generate_ensembles(forecasts, data)
c
obs_and_pred
n
Q
devtools::load_all("~/code/qra")
debug(qra::qra )
x <- generate_ensembles(forecasts, data)
c
c
n
complete_set
complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) %>%
    tidyr::unnest(weights) %>%
    select(-test_data)
complete_set
grouping_vars
pooling_vars
complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) 
pool
Q
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
Q
devtools::load_all("~/code/qra")
debug(qra::qra )
x <- generate_ensembles(forecasts, data)
c
complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) %>%
    tidyr::unnest(weights) %>%
    select(-test_data)
complete_set
complete_set %>%
glimpse
debug(qra_estimate_weights )
c
Q
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
qe <-
      qra(complete_forecasts,
          data, target_date = as.Date(creation_date),
          pool = pool,
          enforce_normalisation = (norm == 1),
          intercept = (intercept == 1),
          per_quantile_weights = (per_quantile_weights == 1),
          history = history_weeks,
          max_future = 14)
ensemble <- complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) %>%
    tidyr::unnest(weights) %>%
    select(-test_data)
Q
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
c
c
ensemble <- complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) %>%
    tidyr::unnest(weights) %>%
    select(-test_data)
ensemble
n
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
n
qe <-
      qra(complete_forecasts,
          data, target_date = as.Date(creation_date),
          pool = pool,
          enforce_normalisation = (norm == 1),
          intercept = (intercept == 1),
          per_quantile_weights = (per_quantile_weights == 1),
          history = history_weeks,
          max_future = 14)
c
qe
n
obs_and_pred
n
complete_set
ensemble <- complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) %>%
    tidyr::unnest(weights) %>%
    select(-test_data)
n
n
n
qe
n
c
c
options(error = recover )
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
n
c
17
obs_and_pred
16
obs_and_pred
present_models
data
Q
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
0
devtools::load_all("~/code/qra")
devtools::load_all()
x <- generate_ensembles(forecasts, data)
n
16
obs_and_pred
present_models
forecasts
latest_checked
present
present_models
obs_and_pred
creation_date
creation_dates
Q
forecasts
x <- generate_ensembles(forecasts, data)
c
16
target_date
latest_checked
creation_dates
creation_date
creation_dates
min_date
max_date
history
Q
devtools::load_all()
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
n
16
complete_forecasts
obs_and_pred
target_date
creation_dates
history
length(creation_dates )
length(creation_dates) == 0
min_date
max_date
qra
  Q
devtools::load_all("~/code/qra")
x <- generate_ensembles(forecasts, data)
c
16
complete_set
complete_set$horizon %>%
unique
complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) 
debug(qra_estimate_weights)
complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) 
pred_matrices
data
tau
qe
n
16
debug(qe )
debug(qra_estimate_weights)
ensemble <- complete_set %>%
    filter(!is.na(data)) %>%
    tidyr::nest(test_data = c(-setdiff(grouping_vars, "creation_date"))) %>%
    dplyr::mutate(weights =
                    purrr::map(test_data, qra_estimate_weights,
                               per_quantile_weights = per_quantile_weights,
                               enforce_normalisation = enforce_normalisation,
                               intercept = intercept)) %>%
    tidyr::unnest(weights) %>%
    select(-test_data)
n
pred_matrices %>%
dim
tau %>%
dim
tau
data %>%
dim
data
data %>%
length
enforce_normalisation
intercept
time_limit
list(... )
quantgen::quantile_ensemble(pred_matrices, data, tau,
                                  tau_groups = tau_groups,
                                  nonneg = enforce_normalisation,
                                  unit_sum = enforce_normalisation,
                                  intercept = intercept,
                                  time_limit = 60,
                                  ...)
quantgen::quantile_ensemble(pred_matrices, data, tau,
                                  tau_groups = tau_groups,
                                  nonneg = enforce_normalisation,
                                  unit_sum = enforce_normalisation,
                                  intercept = intercept,
                                  time_limit = 60,
                                  ...)
quantgen::quantile_ensemble(pred_matrices, data, tau,
                                  tau_groups = tau_groups,
                                  nonneg = enforce_normalisation,
                                  unit_sum = enforce_normalisation,
                                  intercept = FALSE,
                                  time_limit = 60,
                                  ...)
quantgen::quantile_ensemble(pred_matrices, data, tau,
                                  tau_groups = tau_groups,
                                  nonneg = enforce_normalisation,
                                  unit_sum = enforce_normalisation,
                                  intercept = intercept,
                                  time_limit = 60,
                                  ...)
devtools::install_github("ryantibs/quantgen" )
devtools::install_github("ryantibs/quantgen/R-package/quantgen" )
quantgen::quantile_ensemble(pred_matrices, data, tau,
                                  tau_groups = tau_groups,
                                  nonneg = enforce_normalisation,
                                  unit_sum = enforce_normalisation,
                                  intercept = intercept,
                                  time_limit = 60,
                                  ...)
c
c
q()
n
